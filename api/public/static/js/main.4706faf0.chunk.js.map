{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Button","props","onMouseDown","onClick","className","invert","active","children","App","useState","demo","setDemo","demoParam1","setDemoParam1","demoParam2","setDemoParam2","demoParam1Info","useMemo","demoParam2Info","miroViewport","method","description","quoteDemoOptions","setQuoteDemoOptions","quoteDemoOption","setQuoteDemoOption","endpoint","process","REACT_APP_API_ENDPOINT","useEffect","setMessage","fetch","then","res","json","options","id","message","request","useCallback","a","body","JSON","stringify","undefined","headers","ok","toFixed","style","backgroundColor","alt","src","value","onChange","e","target","map","o","name","type","title","width","height","frameBorder","scrolling","allowFullScreen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4706faf0.chunk.js","sourcesContent":["import { useState, useMemo, useEffect, useCallback } from 'react';\n\nconst Button = (props) => {\n  return (\n    <div\n      onMouseDown={props.onClick}\n      className={\n        `text-center select-none cursor-pointer ${props.invert ?\n          `border-black bg-white text-black` : `border-white bg-black text-white`\n        } p-2 border-2 rounded-lg transform transition-all duration-200 ${props.active ?\n          `border-b-2 translate-y-0.5` : `border-b-4 hover:border-b-8 hover:-translate-y-0.5`\n        }`\n      }\n    >\n      {props.children}\n    </div>\n  )\n}\n\nfunction App() {\n  const [demo, setDemo] = useState(0);\n\n  const [demoParam1, setDemoParam1] = useState('joe@evilbigcorp.com');\n  const [demoParam2, setDemoParam2] = useState('badpassword123');\n\n  const demoParam1Info = useMemo(() =>\n    [\n      ['Email', 'email', 'joe@evilbigcorp.com', 'email'],\n      ['Width', 'width', '200', 'number'],\n      ['Message', 'message', 'Say something to Junction', 'text'],\n      ['Under 100, please', 'number', '150', 'number'],\n      null\n    ][demo],\n    [demo]\n  )\n\n  const demoParam2Info = useMemo(() =>\n    [\n      ['Password', 'password', 'badpassword123', 'password'],\n      ['Height', 'height', '400', 'number'],\n      null,\n      null,\n      null\n    ][demo],\n    [demo]\n  )\n\n  const miroViewport = useMemo(() =>\n    ['-1227,-610,1766,1837', '912,-494,1474,2434', '2644,-522,1675,1437'][demo],\n    [demo]\n  );\n\n  const method = useMemo(() =>\n    ['GET', 'GET', 'POST', 'GET', 'POST'][demo],\n    [demo]\n  )\n\n  const description = useMemo(() =>\n    [\n      'Sometimes, as the lazy developers we are, we just want to store some simple information on a backend and have it accessible on a website. In this example, we let our customers check if their subscription is active.',\n      'What if we just want to make a super-simple pricing function on our website? We don\\'t want to share our material prices, but deploying a proper backend seems overkill. Let\\'s just do quick \\'n dirty using Hasty Hooks!',\n      'We can also make use of data fetching in our hook. So let\\'s get really meta and use it to post a note to this very Miro board.',\n    ][demo],\n    [demo]\n  )\n\n  const [quoteDemoOptions, setQuoteDemoOptions] = useState(null);\n  const [quoteDemoOption, setQuoteDemoOption] = useState(null);\n\n  const endpoint = useMemo(() =>\n    process.env.REACT_APP_API_ENDPOINT +\n    [\n      `/my-subscription?email=${demoParam1}&password=${demoParam2}`,\n      `/material-quote?materialId=${quoteDemoOption}&width=${demoParam1}&height=${demoParam2}`,\n      `/mironote`,\n      `/buggy?number=${demoParam1}`,\n      'POST'\n    ][demo],\n    [demo, demoParam1, demoParam2, quoteDemoOption]\n  )\n\n  useEffect(() => {\n    setMessage(null);\n\n    if (demo === 1) {\n      fetch(\n        process.env.REACT_APP_API_ENDPOINT + '/materials',\n        { method: 'GET' }\n      ).then(res => res.json()).then(options => {\n        setQuoteDemoOptions(options);\n        setQuoteDemoOption(options[0].id)\n      });\n    }\n  }, [demo])\n\n  useEffect(() => {\n    demoParam1Info && setDemoParam1(demoParam1Info[2]);\n    demoParam2Info && setDemoParam2(demoParam2Info[2]);\n  }, [demoParam1Info, demoParam2Info])\n\n  const [message, setMessage] = useState(null);\n\n  const request = useCallback(async () => {\n    const res = await fetch(\n      endpoint,\n      {\n        method,\n        body: method === 'POST' ? JSON.stringify({\n          [demoParam1Info[1]]: demoParam1,\n          ...(demoParam2Info ? { [demoParam2Info[1]]: demoParam2 } : {})\n        }) : undefined,\n        ...method === 'POST' ? {\n          headers: { 'Content-Type': 'application/json' }\n        } : {}\n      }\n    )\n\n    const body = await res.json();\n    if (res.ok) {\n      switch (demo) {\n        case 0: {\n          setMessage(body ? 'Your subscription is active, yay!' : 'Your subscription is not active.');\n          break;\n        }\n        case 1: {\n          setMessage(`That will be ${body.toFixed(2)} â‚¬. You can't buy it though, since this is... not a real shop.`);\n          break;\n        }\n        case 2: {\n          setMessage(`Cool!`);\n          break;\n        }\n        case 3: {\n          setMessage(`It would be a shame if someone submitted a number over 100...`);\n          break;\n        }\n        default: {\n\n        }\n      }\n      return;\n    }\n\n    setMessage(body);\n  }, [\n    demoParam1,\n    demoParam2,\n    demoParam1Info,\n    demoParam2Info,\n    endpoint,\n    method,\n    demo\n  ]);\n\n  return (\n    <div className=\"absolute w-full h-full\">\n      <div className=\"absolute flex flex-col w-1/2 left-0 top-0 bottom-0 p-16 text-black overflow-auto\" style={{ backgroundColor: '#fe8f02' }}>\n        <img alt=\"Logo\" src=\"logo.png\" className=\"max-w-sm mb-8\" />\n        <p className=\"mb-8\">\n          Who needs Cloud Functions or Zapier when you have Miro?\n          All API examples below are generated live from the Miro board to the right. (Click \"view board\")\n          Feel free to call the endpoints manually or check the demos below!\n        </p>\n        <div className=\"grid gap-2 grid-flow-col items-start mb-4\">\n          <Button onClick={() => setDemo(0)} active={demo === 0}>Lookup</Button>\n          <Button onClick={() => setDemo(1)} active={demo === 1}>Quoting</Button>\n          <Button onClick={() => setDemo(2)} active={demo === 2}>Miro API (Meta)</Button>\n          <Button onClick={() => setDemo(3)} active={demo === 3}>Bug</Button>\n          <Button onClick={() => setDemo(4)} active={demo === 4}>Webhooks</Button>\n        </div>\n        <div className=\"bg-white rounded-xl flex-grow border-2 border-black relative\">\n          {\n            message !== null && <div className=\"absolute flex flex-col items-center justify-center bg-white top-0 left-0 right-0 bottom-0 z-10 rounded-lg\">\n              <p className=\"mb-4\">{message}</p>\n              <Button invert onClick={() => { setMessage(null) }}>Ok!</Button>\n            </div>\n          }\n          <div className=\" bg-black text-white font-mono flex items-center p-4 rounded-t-lg\">\n            {[method]}{\" \"}{endpoint}\n          </div>\n          <div className=\"p-8 flex flex-col items-start\">\n            <div className=\"pb-8\">\n              {description}\n            </div>\n            <div className=\"flex flex-col mb-4\">\n              {demo === 1 && <div className=\"flex flex-row\">\n                <div className=\"w-36 h-8\">Pick a material</div>\n                {quoteDemoOptions ?\n                  <select\n                    className=\"border-b-2\n                  border-gray-300\"\n                    value={quoteDemoOption}\n                    onChange={e => setQuoteDemoOption(e.target.value)}\n                  >\n                    {quoteDemoOptions.map(o => <option key={o.id} value={o.id}>{o.name}</option>)}\n                  </select> : 'Loading materials...'\n                }\n              </div>}\n              {demoParam1Info && <div className=\"flex flex-row\">\n                <div className=\"w-36 h-8\">{demoParam1Info[0]}</div>\n                <input\n                  className=\"border-b-2 border-gray-300\"\n                  type={demoParam1Info[3]}\n                  value={demoParam1}\n                  onChange={e => setDemoParam1(e.target.value)}\n                />\n              </div>}\n              {demoParam2Info && <div className=\"flex flex-row\">\n                <div className=\"w-36 h-8\">{demoParam2Info[0]}</div>\n                <input\n                  className=\"border-b-2 border-gray-300\"\n                  type={demoParam2Info[3]}\n                  value={demoParam2}\n                  onChange={e => setDemoParam2(e.target.value)}\n                />\n              </div>}\n            </div>\n            <Button invert onClick={request}>Submit</Button>\n          </div>\n        </div>\n      </div>\n      <iframe\n        title=\"Miro\"\n        width=\"50%\"\n        height=\"100%\"\n        key={miroViewport}\n        src={`https://miro.com/app/live-embed/o9J_lhnGlIk=/?moveToViewport=${miroViewport}`}\n        frameBorder=\"0\"\n        scrolling=\"no\"\n        allowFullScreen\n        className=\"absolute w-1/2 left-1/2 top-0 bottom-0\">\n      </iframe>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}